{"version":3,"sources":["component/navbar/Navbar.js","component/content/Content.js","component/contentList/ContentList.js","component/fullcontent/FullContent.js","container/MainView.js","container/Game.js","component/contentView/ContentView.js","container/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","react_router_dom","to","Component","ContentView","props","url","children","FullContentLink","onClick","onChangeFullContent","Content","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onHover","setState","isShow","onUnHover","content","displayImg","imgSrc","src","state","name","_this2","onMouseEnter","onMouseLeave","Content_FullContentLink","Content_ContentView","ContentList","count","Math","ceil","contents","length","component","i","dataPerRow","slice","push","map","item","index","key","component_content_Content","listRender","FullContent","frameBorder","allowFullScreen","allow","MainView","setContents","data","list","items","forEach","snippet","title","handleFullContentChange","fullContent","fetchYoutube","axios","get","then","_ref","component_fullcontent_FullContent","component_contentList_ContentList","Game","_Component","videoId","inherits","createClass","value","fetchSearch","_fetchSearch","asyncToGenerator","regenerator_default","mark","_callee","keyword","_ref2","wrap","_context","prev","next","sent","t0","console","log","finish","stop","_x","apply","arguments","width","height","match","params","Search","handleInputChange","e","target","handleSubmit","preventDefault","onSubmit","onChange","Main","react_router","exact","path","App","component_navbar_Navbar","App_Main","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iZAqCeA,0LA9BX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDAClBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBC,KAAK,KAAtC,WACAJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpLV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAGlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BQ,GAAG,0BAC3CX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAIZH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMT,UAAU,WAAWU,GAAG,KAA9B,SAELb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACTH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMT,UAAU,WAAWU,GAAG,SAA9B,SAELb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACTH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMT,UAAU,WAAWU,GAAG,WAA9B,sBAtBWC,cCAfC,qBAAc,SAACC,GACf,IAAIC,EAAM,SAASD,EAAML,GACzB,OAAQX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,GAAII,GACVD,EAAME,YAIjBC,EAAkB,SAACH,GACrB,OAAQhB,EAAAC,EAAAC,cAAA,KAAGkB,QAASJ,EAAMK,qBACfL,EAAME,WAgDNI,cA3Cd,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAORc,QAAU,WACTP,EAAKQ,SAAS,CAACC,QAAO,KATJT,EAYnBU,UAAY,WACXV,EAAKQ,SAAS,CAACC,QAAO,KAbJT,EAgBlBF,oBAAsB,WACpBE,EAAKP,MAAMI,QAAQG,EAAKP,MAAMkB,UAjBdX,EAoBlBY,WAAa,WACX,IAAIC,EAAS,8BAA8Bb,EAAKP,MAAMkB,QAAQvB,GAAG,SAGjE,OAFoBX,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYkC,IAAKD,IAAWb,EAAKe,MAAMN,OAAQhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IAAwBoB,EAAKP,MAAMkB,QAAQK,KAA3C,MAA+D,KAnB/KhB,EAAKe,MAAQ,CACZN,QAAQ,GAJQT,wEA4BT,IAAAiB,EAAAd,KACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUsC,aAAc,kBAAMD,EAAKV,WAAWY,aAAc,kBAAMF,EAAKP,cACrFP,KAAKV,MAAMI,QACTpB,EAAAC,EAAAC,cAACyC,EAAD,CAAiBtB,oBAAqBK,KAAKL,qBAAsBK,KAAKS,cACtEnC,EAAAC,EAAAC,cAAC0C,EAAD,CAAajC,GAAIe,KAAKV,MAAMkB,QAAQvB,IAAKe,KAAKS,sBAlCjCrB,aCgDP+B,uLArDZ,IAJY,IAAAtB,EAAAG,KAERoB,EAAQC,KAAKC,KAAKtB,KAAKV,MAAMiC,SAASC,OAAO,GAC7CC,EAAY,GACRC,EAAG,EAAEA,EAAEN,EAAMM,IAAK,CACzB,IAAIC,EAAa3B,KAAKV,MAAMiC,SAASK,MAAQ,EAAFF,EAAM,EAAFA,EAAI,GAQnDD,EAAUI,KAETvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAGbkD,EAAWG,IAAI,SAACC,EAAKC,GACjB,OAGE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWwD,IAAKD,GAKxB1D,EAAAC,EAAAC,cAAC0D,EAAD,CAAS1B,QAASuB,EAAMrC,QAASG,EAAKP,MAAMI,eAS7D,OAAO+B,mCAKN,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDAIZuB,KAAKmC,qBAjDY/C,aCuBXgD,0LAtBX,OACE9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAKbH,EAAAC,EAAAC,cAAA,UACAC,UAAU,YACV4D,YAAY,IACZ1B,IAAK,iCAAiCX,KAAKV,MAAMkB,QAAQvB,GAAG,oBAC5DqD,iBAAiB,EACjBC,MAAM,qBAbYnD,+BC4HXoD,cA1Hd,SAAAA,EAAYlD,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACjB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMV,KAoEPmD,YAAc,SAACC,GACd,IAAIC,EAAO,GAIV,OAHAD,EAAKE,MAAMC,QAAQ,SAACd,EAAMC,GACtBW,EAAKd,KAAK,CAAC5C,GAAG8C,EAAK9C,GAAG4B,KAAKkB,EAAKe,QAAQC,UAErCJ,GA1ES9C,EAoFlBmD,wBAA0B,SAACxC,GACzBX,EAAKQ,SAAS,CACZ4C,YAAYzC,KAtFEX,EA2FlBqD,aAAe,WAEbC,IAAMC,IAAI,yIACTC,KAAK,SAAAC,GAAY,IAAVZ,EAAUY,EAAVZ,KAGDC,EAAO9C,EAAK4C,YAAYC,GAE9B7C,EAAKQ,SAAS,CACVkB,SAASoB,EAAKf,MAAM,EAAEe,EAAKnB,QAC3ByB,YAAYN,EAAK,QAzCpB9C,EAAKe,MAAQ,CACZqC,YAAa,GAChB1B,SAAW,IA9DK1B,mFA+EjBG,KAAKkD,gDA4BJ,OACE5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAIdH,EAAAC,EAAAC,cAAC+E,EAAD,CAAa/C,QAASR,KAAKY,MAAMqC,cAIhC3E,EAAAC,EAAAC,cAACgF,EAAD,CAAajC,SAAUvB,KAAKY,MAAMW,SAAU7B,QAASM,KAAKgD,kCArH3C5D,sCC4GRqE,EA5Gf,SAAAC,GACC,SAAAD,EAAYnE,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyD,IACjB5D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2D,GAAAtD,KAAAH,KAAMV,KAiBP0D,wBAA0B,SAACxC,GACzBX,EAAKQ,SAAS,CACZ4C,YAAYzC,KApBEX,EAyBlBqD,aAAe,WAEbC,IAAMC,IAAI,yIACTC,KAAK,SAAAC,GAAY,IAAVZ,EAAUY,EAAVZ,KAGDC,EAAO9C,EAAK4C,YAAYC,GAE9B7C,EAAKQ,SAAS,CACVkB,SAASoB,EAAKf,MAAM,EAAEe,EAAKnB,QAC3ByB,YAAYN,EAAK,QAnCN9C,EAmDlB4C,YAAc,SAACC,GACb,IAAIC,EAAO,GAWX,OAVAD,EAAKE,MAAMC,QAAQ,SAACd,GACdA,EAAK9C,GAAG0E,SACVhB,EAAKd,KAAK,CAAE5C,GAAI8C,EAAK9C,GAAG0E,QAAS9C,KAAMkB,EAAKe,QAAQC,UAK3DlD,EAAKQ,SAAS,CACb4C,YAAYN,EAAK,KAERA,GA5DL9C,EAAKe,MAAQ,CACZqC,YAAa,GAChB1B,SAAW,IALK1B,EADpB,OAAAC,OAAA8D,EAAA,EAAA9D,CAAA2D,EAAAC,GAAA5D,OAAA+D,EAAA,EAAA/D,CAAA2D,EAAA,EAAAxB,IAAA,oBAAA6B,MAAA,WAcG9D,KAAK+D,YAAY,WAdpB,CAAA9B,IAAA,cAAA6B,MAAA,eAAAE,EAAAlE,OAAAmE,EAAA,EAAAnE,CAAAoE,EAAA3F,EAAA4F,KAAA,SAAAC,EAmEoBC,GAnEpB,IAAAC,EAAA5B,EAAA,OAAAwB,EAAA3F,EAAAgG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAoEqB,GACL,0CArEhBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAwE6BvB,IAAMC,IAC3B,kDACEiB,EACA,2EA3EV,OAAAC,EAAAE,EAAAG,KAwEcjC,EAxEd4B,EAwEc5B,KASX1C,KAAKK,SAAS,CACdkB,SAAUvB,KAAKyC,YAAYC,KAlF9B8B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAI,GAAAJ,EAAA,SAqFMK,QAAQC,IAAI,IArFlB,eAAAN,EAAAC,KAAA,GAuFMI,QAAQC,IAAI,OAvFlBN,EAAAO,OAAA,6BAAAP,EAAAQ,SAAAZ,EAAApE,KAAA,mCAAAiF,GAAA,OAAAjB,EAAAkB,MAAAlF,KAAAmF,YAAA,KAAAlD,IAAA,SAAA6B,MAAA,WA6FI,OACExF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAIdH,EAAAC,EAAAC,cAAC+E,EAAD,CAAa/C,QAASR,KAAKY,MAAMqC,cAIhC3E,EAAAC,EAAAC,cAACgF,EAAD,CAAajC,SAAUvB,KAAKY,MAAMW,SAAU7B,QAASM,KAAKgD,+BAtGlES,EAAA,CAA0BrE,aCoBXC,0LAnBX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAKbH,EAAAC,EAAAC,cAAA,UACCC,UAAU,sBACX4D,YAAY,IACZ+C,MAAM,OAAOC,OAAO,QACpB1E,IAAK,iCAAiCX,KAAKV,MAAMgG,MAAMC,OAAOtG,GAC9DqD,iBAAiB,EACjBC,MAAM,sCAfYnD,sBCALoG,6MACnB5E,MAAQ,CACNW,SAAU,GACV8C,QAAS,MAGXoB,kBAAoB,SAAAC,GAClB7F,EAAKQ,SAAS,CAAEgE,QAASqB,EAAEC,OAAO7B,WAGpC8B,aAAe,SAAAF,GACb7F,EAAKkE,YAAYlE,EAAKe,MAAMyD,SAC5BqB,EAAEG,oBAGJpD,YAAc,SAAAC,GACZ,IAAIC,EAAO,GAMX,OALAD,EAAKE,MAAMC,QAAQ,SAAAd,GACbA,EAAK9C,GAAG0E,SACVhB,EAAKd,KAAK,CAAE5C,GAAI8C,EAAK9C,GAAG0E,QAAS9C,KAAMkB,EAAKe,QAAQC,UAGjDJ,sHAGS0B,kFACC,GACL,4DAGalB,IAAMC,IAC3B,kDACEiB,EACA,2FAHI3B,SASR1C,KAAKK,SAAS,CAAEkB,SAAUvB,KAAKyC,YAAYC,uDAE3CmC,QAAQC,IAARN,EAAAI,6BAEAC,QAAQC,IAAI,wKAIP,IACCT,EAAYrE,KAAKY,MAAjByD,QACR,OACE/F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMsH,SAAU9F,KAAK4F,cACnBtH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLoH,SAAU/F,KAAKyF,kBACf3B,MAAOO,KAGX/F,EAAAC,EAAAC,cAACgF,EAAD,CAAajC,SAAUvB,KAAKY,MAAMW,mBA3DNnC,aCO9B4G,EAAO,kBAEX1H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,KAKE3H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAI1E,UAAWe,IAMjClE,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOE,KAAK,YAAY1E,UAAWpC,IACnCf,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOE,KAAK,UAAU1E,UAAW+D,IACjClH,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOE,KAAK,QAAQ1E,UAAWgC,MAiBpB2C,mLAXX,OACE9H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAC6H,EAAD,MAEA/H,EAAAC,EAAAC,cAAC8H,EAAD,cAPUlH,aClBEmH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCXNqB,IAASC,OAGRtI,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACCZ,EAAAC,EAAAC,cAACqI,EAAD,OAEEC,SAASC,eAAe,SDgHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.fd4ecbe8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';//화면 이동을 위해 Link를 react-router-dom에서 불러옴\r\nimport './Navbar.css';\r\n\r\n//상단 메뉴를 가지고 있는 컴포넌트\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n       <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark-trans \">\r\n\t\t  <a className=\"navbar-brand logo\" href=\"#\">YOUFLIX</a>\r\n\t\t  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t    <span className=\"navbar-toggler-icon\"></span>\r\n\t\t  </button>\r\n\r\n\t\t  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t    <ul className=\"navbar-nav mr-auto\">\r\n\t\t      <li className=\"nav-item active\">\r\n\t\t        {/* \r\n\t\t\t\t\tLink 컴포넌트를 이용해 url을 \"/\"로 변경하고 홈 화면을 렌더링\r\n\t\t        */}\r\n\t\t        <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n\t\t      </li>\r\n\t\t\t  <li className=\"nav-item active\">\r\n\t\t        <Link className=\"nav-link\" to=\"/game\">Game</Link>\r\n\t\t      </li>\r\n\t\t\t  <li className=\"nav-item active\">\r\n\t\t        <Link className=\"nav-link\" to=\"/search\">Search</Link>\r\n\t\t      </li>\r\n\t\t    </ul>\r\n\t\t  </div>\r\n\t\t</nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"./Content.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContentView = (props) => {\r\n      let url = \"/view/\"+props.id\r\n      return (<NavLink to={url}>\r\n                {props.children}\r\n              </NavLink>)\r\n    }\r\n\r\nconst FullContentLink = (props) => {\r\n    return (<a onClick={props.onChangeFullContent}>\r\n              {props.children}\r\n            </a>)\r\n    }\r\n\r\nclass Content extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\r\n\t  this.state = {\r\n\t  \tisShow: false\r\n\t  };\r\n\t}\r\n\r\n\tonHover = () => {\r\n\t\tthis.setState({isShow:true})\r\n\t}\r\n\r\n\tonUnHover = () => {\r\n\t\tthis.setState({isShow:false})\r\n\t}\r\n\r\n  onChangeFullContent = () => {\r\n    this.props.onClick(this.props.content)\r\n  }\r\n\r\n  displayImg = () => {\r\n    let imgSrc = \"https://img.youtube.com/vi/\"+this.props.content.id+\"/0.jpg\"\r\n    let imgComponent = (<div><img className=\"thumbnail\" src={imgSrc} />{this.state.isShow?(<div className=\"middle\"><div className=\"text\"> {this.props.content.name} </div></div>):\"\"}</div>);\r\n \r\n    return imgComponent\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content\" onMouseEnter={() => this.onHover()} onMouseLeave={() => this.onUnHover()}>\r\n      {this.props.onClick?\r\n        (<FullContentLink onChangeFullContent={this.onChangeFullContent}>{this.displayImg()}</FullContentLink>):\r\n        (<ContentView id={this.props.content.id}>{this.displayImg()}</ContentView>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nContent.propTypes = {\r\n  onClick : PropTypes.func,\r\n  content: PropTypes.object\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from 'react';\r\nimport './ContentList.css';\r\nimport Content from \"../content/Content.js\"\r\nimport PropTypes from \"prop-types\";\r\n\r\n//콘텐츠의 리스트를 보여주는 컴포넌트\r\nclass ContentList extends Component {\r\n\r\n  //한줄에 4개의 콘텐츠를 출력 하기 위해서 컴포넌트를 구성해주는 함수\r\n  listRender() {\r\n    // console.log(this.props.contents)\r\n  \tvar count = Math.ceil(this.props.contents.length/4)//현재 콘텐츠를 한줄에 4개씩 보여주면 몇줄이 나오는지를 구함\r\n  \tlet component = [] //컴포넌트를 담을 배열 선언\r\n  \tfor(let i =0;i<count;i++) {//반복문을 이용해서 한줄씩 컴포넌트를 만들어줌\r\n  \t\tlet dataPerRow = this.props.contents.slice(i*4,i*4+4)//slice를 이용해서 그 줄에 들어가야 하는 데이터를 반환받음\r\n                                                    //현재줄*4번째 부터 현재줄*4+4 하면 0번째 줄일때는 0부터 3까지\r\n                                                    //1번째 줄일때는 4부터 7까지의 데이터를 불러온다.\r\n\r\n      //위에서 선언한 배열에 한줄을 구성하는 컴포넌트를 push한다.\r\n      //push는 배열의 맨뒤에 데이터를 넣을때 사용 하는 함수이다.\r\n      //이런 식으로 컴포넌트를 추가 가능한 이유는 첫번째 시간에 말했던것 처럼 jsx는 결국 js를 좀더 편리하게 보여주는 역할일뿐\r\n      //결국 jsx가 읽혀질때는 xml형태의 js로 변환되기 때문이다.\r\n  \t\tcomponent.push(\r\n        // row는 부트스트랩에서 한줄을 의미 하는 class이다.\r\n  \t\t\t<div className=\"row\">\r\n  \t\t\t\t{\r\n            //위에서 4개의 데이터를 뽑아서 저장해 가지고 있던 배열을 map을 이용해서 4개의 콘텐츠를 그려준다.\r\n  \t\t\t\t\tdataPerRow.map((item,index) => {\r\n\t\t\t      \t\treturn (\r\n                  // 반복문 안에서 jsx를 사용할때는 반드시 key를 써줘야 한다.\r\n                  // col-md-3은 한 줄을 12등분 했을때 3칸만큼을 차지 하겠다는 의미이다.\r\n\t\t\t      \t\t  <div className=\"col-md-3\" key={index}>\r\n\t\t\t\t\t      \t  {/* \r\n                      콘텐츠를 표현해주는 content component를 선언하는데 이때 onClick이벤트를 props로 넘겨준다.\r\n                      이 이벤트는 콘텐츠를 눌렀을때 상단의 실행되는 플레이어를 변경하는 이벤트 이다.\r\n                    */}\r\n                    <Content content={item} onClick={this.props.onClick}/>\r\n\t\t\t\t\t        </div>\r\n\t\t\t      \t\t)\r\n\t\t\t      \t})\r\n  \t\t\t\t}\r\n  \t\t\t</div>\r\n  \t\t)\r\n  \t}\r\n\r\n  \treturn component\r\n  }\t\r\n  render() {\r\n  \t\r\n\r\n    return (\r\n      <div className=\"contentList align-items-center justify-content-center\">\r\n\t      {/*\r\n          리스트를 렌더링해주는 함수를 실행 시킨다.\r\n        */}\r\n        {this.listRender()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContentList.propTypes = {\r\n  contents: PropTypes.array,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default ContentList;\r\n","import React, { Component } from 'react';\r\nimport \"./FullContent.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//홈화면에서 영상을 실행시키는 컴포넌트\r\nclass FullContent extends Component {\r\n  render() { \r\n    return (\r\n      <div className=\"FullContent\">\r\n      \t{/*\r\n          유튜브를 실행 시키기 위해서는 iframe을 사용해야 하는데, 유튜브 api로 실행 시킬 주소를 받아와서 \r\n          iframe으로 실행 시킨다.\r\n        */}\r\n        <iframe\r\n      \t\tclassName=\"my-iframe\"\r\n      \t\tframeBorder=\"0\"\r\n      \t\tsrc={\"https://www.youtube.com/embed/\"+this.props.content.id+\"?autoplay=1&rel=0\"}\r\n      \t\tallowFullScreen={true}\r\n      \t\tallow=\"autoplay\"\r\n      \t\t/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFullContent.propTypes = {\r\n  content: PropTypes.object\r\n}\r\n\r\nexport default FullContent;\r\n","import React, { Component } from 'react';\r\nimport './MainView.css';\r\nimport ConetntList from \"../component/contentList/ContentList.js\";\r\nimport FullContent from '../component/fullcontent/FullContent.js';\r\nimport axios from 'axios';\r\n\r\nclass MainView extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\r\n\t  // this.src = [\r\n\t  //   {\r\n\t  //   \tname: \"[Official MV] MOMMY SON (마미손) - 소년점프 (feat. 배기성)\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/D3ZFtSoWtRc\",\r\n\t  //   \tid: \"D3ZFtSoWtRc\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"수면유도400% 우주다큐멘터리 꿀잠 수면영상 우주의끝을 찾아서 (광고X)\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/gcUAj4x2IVo\",\r\n\t  //   \tid: \"gcUAj4x2IVo\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"사진 실력을 한번에 2배로 끌어올릴 수 있는 연습법, 빛 읽기! I Hury 태영작가\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/tHzcoVm7LtQ\",\r\n\t  //   \tid: \"tHzcoVm7LtQ\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"라이트룸 인물 보정에 대한 모든 것, 이거 하나로 그냥 끝내기 Lightroom Portrait Edit I Hury 태영작가\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/onfI6B19dR4\",\r\n\t  //   \tid: \"onfI6B19dR4\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"About Time - How Long Will I Love You\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/iQop_qs4xV4\",\r\n\t  //   \tid: \"iQop_qs4xV4\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"Sam Smith - I'm Not The Only One\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/nCkpzqqog4k\",\r\n\t  //   \tid: \"nCkpzqqog4k\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"[천우희] 출중한 여자의 나혼자 요리하기 (※심쿵주의보 발령※)\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/zfSIOeIJejc\",\r\n\t  //   \tid: \"zfSIOeIJejc\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"눈 속에서의 부쉬 크래프트 캠프 - 불, 대피소, 도끼, 요리 생선\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/A3VdFB6QWt0\",\r\n\t  //   \tid: \"A3VdFB6QWt0\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \" [KOR SUB] 다이어트에 성공하는 네 가지 쉬운 단계들(How To Lose Weight in 4 Easy Steps!\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/yTbpFZ0mrEQ\",\r\n\t  //   \tid: \"yTbpFZ0mrEQ\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \" 레이먼킴이 알려주는 완벽한 스테이크 굽는 법 (Feat. 포터하우스, 토마호크 스테이크)\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/PhftrtBetQ4\",\r\n\t  //   \tid: \"PhftrtBetQ4\"\r\n\t  //   },\r\n\t  //   {\r\n\t  //   \tname: \"[최마태] 스마트폰/폰카로 사진 잘 찍는 4가지 방법 #1 (feat. Ripple_s 미나, 민욱, 아이폰)\",\r\n\t  //   \tsrc: \"https://www.youtube.com/embed/pOL_fJi3Od8\",\r\n\t  //   \tid: \"pOL_fJi3Od8\"\r\n\t  //   }\r\n   //  ]\r\n      this.state = {\r\n      \tfullContent: {},// 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\r\n\t  \tcontents : [] // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\r\n\t  };\r\n\r\n\t}\r\n\r\n// 서버로 부터 받은 데이터를 내가 원하는 형태로 변경 하는 함수\r\n// {id: , name: } 형식으로 모든 데이터들을 변환\r\n  setContents = (data) => { \r\n   let list = []\r\n    data.items.forEach((item, index) => {\r\n        list.push({id:item.id,name:item.snippet.title})\r\n    })\r\n    return list\r\n  }\r\n\r\n//컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\r\n  componentDidMount() {\r\n  \tthis.fetchYoutube()\r\n  }\r\n\r\n//메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\r\n//이 함수를 이용해서 영상을 변경 한다.\r\n  handleFullContentChange = (content) => {\r\n    this.setState({\r\n      fullContent:content\r\n    })\r\n  }\r\n\r\n//유튜브에 ajax 통신을 해서 데이터를 불러 오는 함수\r\n  fetchYoutube = () => {\r\n  \t//axios를 이용해서 유튜브에 영상 목록을 달라고 요청\r\n    axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21')\r\n    .then(({data}) => {//유튜브로 부터 요청한 데이터를 전달 받으면 then으로 데이터를 받음\r\n    \t\t\t\t\t//디스트럭쳐링을 통해서 유튜브로부터 받은 데이터중에서 data만 가져옴 \r\n\r\n\t    const list = this.setContents(data)//받아온 데이터를 내가 원하는 형태로 가공\r\n\r\n\t    this.setState({// 가공한 데이터로 지금 바로 실행할 데이터와, 목록에 보여줄 데이터를 state에 저장\r\n\t        contents:list.slice(1,list.length),//slice 함수는 배열형 데이터를 첫번째인자부터 두번째인자 전까지를 반환해주는 함수 입니다.\r\n\t        fullContent:list[0]//가져온 데이터중 첫번째 데이터를 화면에서 실행 시킵니다.\r\n\t    })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mainView\">\r\n      \t{/*\r\n\t\t\t영상을 실행 시키는 컴포넌트 \r\n      \t*/}\r\n      \t<FullContent content={this.state.fullContent}/>\r\n      \t{/*\r\n\t\t\t실행할 영상 리스트를 출력하는 컴포넌트\r\n      \t*/}\r\n       \t<ConetntList contents={this.state.contents} onClick={this.handleFullContentChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainView;\r\n","import React, { Component } from 'react';\r\nimport './MainView.css';\r\nimport ConetntList from \"../component/contentList/ContentList.js\";\r\nimport FullContent from '../component/fullcontent/FullContent.js';\r\nimport axios from 'axios';\r\n\r\nexport class Game extends Component  {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\t  \r\n      this.state = {\r\n      \tfullContent: {},// 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\r\n\t  \tcontents : [] // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\r\n\t  };\r\n\r\n\t}\r\n\r\n//컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\r\n  componentDidMount() {\r\n\t//   this.fetchYoutube();\r\n\t  this.fetchSearch('games');\r\n  }\r\n\r\n//메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\r\n//이 함수를 이용해서 영상을 변경 한다.\r\n  handleFullContentChange = (content) => {\r\n    this.setState({\r\n      fullContent:content\r\n    })\r\n  }\r\n\r\n//유튜브에 ajax 통신을 해서 데이터를 불러 오는 함수\r\n  fetchYoutube = () => {\r\n  \t//axios를 이용해서 유튜브에 영상 목록을 달라고 요청\r\n    axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21')\r\n    .then(({data}) => {//유튜브로 부터 요청한 데이터를 전달 받으면 then으로 데이터를 받음\r\n    \t\t\t\t\t//디스트럭쳐링을 통해서 유튜브로부터 받은 데이터중에서 data만 가져옴 \r\n\r\n\t    const list = this.setContents(data)//받아온 데이터를 내가 원하는 형태로 가공\r\n\r\n\t    this.setState({// 가공한 데이터로 지금 바로 실행할 데이터와, 목록에 보여줄 데이터를 state에 저장\r\n\t        contents:list.slice(1,list.length),//slice 함수는 배열형 데이터를 첫번째인자부터 두번째인자 전까지를 반환해주는 함수 입니다.\r\n\t        fullContent:list[0]//가져온 데이터중 첫번째 데이터를 화면에서 실행 시킵니다.\r\n\t    })\r\n    })\r\n  }\r\n\r\n  \r\n// 서버로 부터 받은 데이터를 내가 원하는 형태로 변경 하는 함수\r\n// {id: , name: } 형식으로 모든 데이터들을 변환\r\n//   setContents = (data) => { \r\n//    let list = []\r\n//     data.items.forEach((item, index) => {\r\n//         list.push({id:item.id,name:item.snippet.title})\r\n//     })\r\n//     return list\r\n//   }\r\n\r\n  setContents = (data) => {\r\n    let list = [];\r\n    data.items.forEach((item) => {\r\n      if (item.id.videoId) {\r\n        list.push({ id: item.id.videoId, name: item.snippet.title });\r\n      }\r\n\t});\r\n\t\r\n\t// console.log(list);\r\n\tthis.setState({\r\n\t\tfullContent:list[0]\r\n\t})\r\n    return list;\r\n  };\r\n\r\n  async fetchSearch(keyword) {\r\n    let maxResults = 30;\r\n    let token = \"AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY\";\r\n\r\n    try {\r\n      const { data } = await axios.get(\r\n        \"https://www.googleapis.com/youtube/v3/search?q=\" +\r\n          keyword +\r\n          \"&part=snippet&key=\" +\r\n          token +\r\n          \"&maxResults=\" +\r\n          maxResults\r\n      );\r\n\r\n\t  this.setState({ \r\n\t\t\tcontents: this.setContents(data),\t\t\t\r\n\t\t});\r\n    } catch {\r\n      console.log('');\r\n    } finally {\r\n      console.log(\"end\");\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Game\">\r\n      \t{/*\r\n\t\t\t영상을 실행 시키는 컴포넌트 \r\n      \t*/}\r\n      \t<FullContent content={this.state.fullContent}/>\r\n      \t{/*\r\n\t\t\t실행할 영상 리스트를 출력하는 컴포넌트\r\n      \t*/}\r\n       \t<ConetntList contents={this.state.contents} onClick={this.handleFullContentChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport \"./ContentView.css\";\r\n\r\n//영상 리스트를 눌렀을때 플레이어 화면만 보여주고 싶을때 사용하는 컴포넌트\r\nclass ContentView extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"ContentView\">\r\n        {/*\r\n          유튜브를 실행 시키기 위해서는 iframe을 사용해야 하는데, 유튜브 api로 실행 시킬 주소를 받아와서 \r\n          iframe으로 실행 시킨다.\r\n        */}\r\n       \t<iframe\r\n       \t\tclassName=\"content-view-iframe\"\r\n      \t\tframeBorder=\"0\"\r\n      \t\twidth=\"100%\" height=\"100vw\"\r\n      \t\tsrc={\"https://www.youtube.com/embed/\"+this.props.match.params.id}\r\n      \t\tallowFullScreen={true}\r\n      \t\tallow=\"autoplay; encrypted-meida\"\r\n      \t\t/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContentView;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport ContentList from \"../component/contentList/ContentList\";\r\n\r\nexport default class Search extends Component {\r\n  state = {\r\n    contents: [],\r\n    keyword: \"\"\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ keyword: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    this.fetchSearch(this.state.keyword);\r\n    e.preventDefault();\r\n  };\r\n\r\n  setContents = data => {\r\n    let list = [];\r\n    data.items.forEach(item => {\r\n      if (item.id.videoId) {\r\n        list.push({ id: item.id.videoId, name: item.snippet.title });\r\n      }\r\n    });\r\n    return list;\r\n  };\r\n\r\n  async fetchSearch(keyword) {\r\n    let maxResults = 30;\r\n    let token = \"AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY\";\r\n\r\n    try {\r\n      const { data } = await axios.get(\r\n        \"https://www.googleapis.com/youtube/v3/search?q=\" +\r\n          keyword +\r\n          \"&part=snippet&key=\" +\r\n          token +\r\n          \"&maxResults=\" +\r\n          maxResults\r\n      );\r\n\r\n      this.setState({ contents: this.setContents(data) });\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      console.log(\"end\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { keyword } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>검색 </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleInputChange}\r\n            value={keyword}\r\n          />\r\n        </form>\r\n        <ContentList contents={this.state.contents} />\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"; //bootstrap css를 사용하기 위해서 불러옵니다.\r\nimport Navbar from \"./component/navbar/Navbar.js\";\r\nimport MainView from \"./container/MainView.js\";\r\nimport Game from \"./container/Game.js\";\r\nimport ContentView from \"./component/contentView/ContentView.js\";\r\nimport { Switch, Route } from \"react-router-dom\"; //router를 사용하기 위해서 react router dom 불러옵니다.\r\nimport Search from \"./container/Search\";\r\n\r\n//router를 감싸고 있는 함수형 컴포넌트\r\nconst Main = () => (\r\n  //라우팅할때 url이 중복되는것을 막기 위해서 switch 사용\r\n  <Switch>\r\n    {/* \r\n          \"/\" 을 가지는 /serach, /view/:id로 이동을 하면 \"/\"이 포함되어있기 때문에 MainView또한 렌더링이 됩니다.\r\n          이것을 막기 위해서 exact속성을 추가 합니다.\r\n      */}\r\n    <Route exact path=\"/\" component={MainView} />\r\n    {/*\r\n          \"/view/:id\"에 url이 이동했을때 ContentView 컴포넌트를 렌더링합니다.\r\n          여기에서 \":id\" 이 부분은 url에 변화가 필요할때 사용하는 방식 입니다.\r\n          \":이름\"\" 이렇게 설정하면 url을 /view/123, /view/555 라고 해도 ContetnView 컴포넌트를 렌더링하게됩니다.\r\n      */}\r\n    <Route path=\"/view/:id\" component={ContentView} />\r\n    <Route path=\"/search\" component={Search} />\r\n    <Route path=\"/game\" component={Game} />\r\n  </Switch>\r\n);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* 네이게이션바 컴포넌트*/}\r\n        <Navbar />\r\n        {/* 라우터를 가지고 있는 컴포넌트*/}\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render((\r\n\t// 모든 컴포넌트에서 react router가 동작하기 위해서는 최상위 컴포넌트를 \r\n\t//BrwoserRouter로 감싸야함\r\n\t<BrowserRouter>\r\n\t\t<App />\r\n\t</BrowserRouter>\r\n\t\t),document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}